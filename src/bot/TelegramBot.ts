import { Telegraf, Context } from 'telegraf';
import { CommandController } from './CommandController';
import { MongodbService } from '../services/MongodbApiService';
import { CustomContext } from '../models/TelegramTypes';
import LotteryScheduler from '../scheduler/LotteryScheduler';
import TwitterScheduler from '../scheduler/TwitterScheduler';
import { TwitterApi } from 'twitter-api-v2';
import { OpenAI } from 'openai'; //Adjust the import path as necessary

export class TelegramBot {
  private bot: Telegraf<CustomContext>;
  private controller: CommandController;
  private lotterySchedulers: Map<number, LotteryScheduler> = new Map();
  //private twitterScheduler: TwitterScheduler;

  constructor(token: string) {
    //const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

    const twitterClient = new TwitterApi({
      appKey: process.env.TWITTER_APP_KEY!,
      appSecret: process.env.TWITTER_APP_SECRET!,
      accessToken: process.env.TWITTER_ACCESS_TOKEN!,
      accessSecret: process.env.TWITTER_ACCESS_SECRET!,
    });

    this.bot = new Telegraf<CustomContext>(token);
    this.controller = new CommandController(new MongodbService(), this.getLotteryScheduler.bind(this), this.bot);

    //this.twitterScheduler = new TwitterScheduler(twitterClient, new MongodbService(), openai, this.bot);
    this.registerCommands();
    this.registerHandlers();
  }

  private getLotteryScheduler(chatId: number): LotteryScheduler | undefined {
    return this.lotterySchedulers.get(chatId);
  }

  // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶ÊòØÁÆ°ÁêÜÂëò
  private async isAdmin(ctx: CustomContext, userId: number): Promise<boolean> {
    const chatId = ctx.chat?.id;
    if (!chatId) return false;

    try {
      const member = await ctx.telegram.getChatMember(chatId, userId);
      return ['administrator', 'creator'].includes(member.status);
    } catch (error) {
      console.error('Error checking admin status:', error);
      return false;
    }
  }

  // Ê≥®ÂÜåÂëΩ‰ª§ÂàóË°®
  private async registerCommands() {
    await this.bot.telegram.setMyCommands([
      { command: 's_start', description: 'ÊâìÂºÄÂäüËÉΩËèúÂçï' },
      { command: 's_total_score_ranking', description: 'ÁßØÂàÜÊéíÂêç' },
      { command: 's_messages_ranking', description: 'ÂèëË®ÄÊéíÂêç' },
      { command: 's_total_points_ranking', description: 'Ê¥ªË∑ÉÁßØÂàÜÊéíÂêç' },
      { command: 's_dialy_points_ranking', description: '‰ªäÊó•Ê¥ªË∑ÉÊéíÂêç' },
      { command: 's_meeting_ranking', description: '‰ºöËÆÆÁßØÂàÜÊéíÂêç' },
      { command: 's_twitter_ranking', description: 'ÂÜ≤Êé®ÁßØÂàÜÊéíÂêç' },
      { command: 's_lottery_ranking', description: '‰∏≠Â•ñÁßØÂàÜÊéíÂêç' },
      { command: 's_donate_ranking', description: 'ÊçêËµ†ÁßØÂàÜÊéíÂêç' },
      { command: 's_special_ranking', description: 'ÁâπÊÆäË¥°ÁåÆÊéíÂêç' },
      { command: 's_invite_ranking', description: 'ÈÇÄËØ∑ÁßØÂàÜÊéíÂêç' },
      { command: 's_invite_link', description: 'ÁîüÊàêÈÇÄËØ∑ÈìæÊé•' },
      { command: 's_create_lottery', description: 'ÂàõÂª∫ÊäΩÂ•ñ' },
      { command: 's_join_twitter_campaign', description: 'ÂèÇ‰∏éÂÜ≤Êé®' }, // Êñ∞Â¢ûÂëΩ‰ª§
      { command: 's_helpme', description: 'Ëé∑ÂèñÂ∏ÆÂä©' },
    ]);
  }

  // ÁõëÂê¨ÂíåÂçïÁã¨Ê≥®ÂÜåÂëΩ‰ª§
  private registerHandlers() {
    // ÂΩìÁî®Êà∑Ëß¶Âèë "/start" Êó∂ÊòæÁ§∫ËèúÂçï
    this.bot.command('s_start', async (ctx) => {
      this.controller.showMainMenu(ctx);
    });



    // Â§ÑÁêÜÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
    this.bot.on('callback_query', async (ctx) => {
      const pageSize = 10;
      const message = ctx.callbackQuery?.message;
      const title = message && 'text' in message
        ? message.text.split('\n')[0].replace(/^üèÜ\s*/, '').replace(/:/g, '')  // ÂéªÊéâÂâçÈù¢ÁöÑüèÜÂíåÊâÄÊúâÁöÑ:
        : "";
      const callbackData = (ctx.callbackQuery as { data: string })?.data;

      if (!callbackData) {
        return;
      }

      try {
        if (callbackData === 'no_more') {
          await ctx.answerCbQuery('Ê≤°ÊúâÊõ¥Â§ö‰∫Ü', { show_alert: true });
          return;
        }

        const match = callbackData.match(/rank_page_(\d+)_(.+)/);
        if (match) {
          const page = parseInt(match[1], 10);
          const queryField = match[2];

          await this.controller.handlePageRequest(
            ctx,
            Math.max(1, page),
            pageSize,
            title,
            callbackData,
            queryField
          );
          return;
        }

        switch (callbackData) {
          case 's_total_score_ranking':
            this.controller.showTotalScoreRanking(ctx);
            break;
          case 's_messages_ranking':
            this.controller.showMessagesSentRanking(ctx);
            break;
          case 's_total_points_ranking':
            this.controller.showPointsRanking(ctx);
            break;
          case 's_dialy_points_ranking':
            this.controller.showDialyPointsRanking(ctx);
            break;
          case 's_invite_ranking':
            this.controller.showInviteRanking(ctx);
            break;
          case 's_twitter_ranking':
            this.controller.showTwitterRanking(ctx);
            break;
          case 's_meeting_ranking':
            this.controller.showMeetingRanking(ctx);
            break;
          case 's_lottery_ranking':
            this.controller.showLotteryRanking(ctx);
            break;
          case 's_donate_ranking':
            this.controller.showDonateRanking(ctx);
            break;
          case 's_special_ranking':
            this.controller.showSpecialRanking(ctx);
            break;
          case 's_invite_link':
            this.controller.generateInviteLink(ctx);
            break;
          case 's_join_twitter_campaign':
            this.controller.handleJoinTwitterCampaign(ctx);
            break;
          case 's_create_lottery':
            const chatId = ctx.chat?.id;
            if (chatId !== undefined) {
              try {
                const lotteryScheduler = this.getLotteryScheduler(chatId);
                if (lotteryScheduler) {
                  await lotteryScheduler.createLottery();
                  await ctx.reply('ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÂàõÂª∫ÔºÅ');
                } else {
                  await ctx.reply('Êó†Ê≥ïÂàõÂª∫ÊäΩÂ•ñÊ¥ªÂä®ÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ');
                }
              } catch (error) {
                //console.error('Error creating lottery:', error);
                await ctx.reply('ÊäΩÂ•ñÊ¥ªÂä®Â∑≤Â≠òÂú®ÔºåÂàõÂª∫Â§±Ë¥•„ÄÇ');
              }
            } else {
              await ctx.reply('Êó†Ê≥ïÂàõÂª∫ÊäΩÂ•ñÊ¥ªÂä®ÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ');
            }
            break;
          case 's_helpme':
            await ctx.reply('ËØ∑ÈÄâÊã©ÂäüËÉΩÔºåÊàñËÄÖËæìÂÖ•"/ÂëΩ‰ª§"Êìç‰Ωú...');
            break;
          default:
            break;
        }
        // ÂèñÊ∂àÊåâÈíÆÁÇπÂáªÂêéÔºåÁßªÈô§ÊåâÈíÆ
        await ctx.answerCbQuery();
      } catch (error) {
        console.error('Error handling callback:', error);
        if (error instanceof Error && error.message.includes('message is not modified')) {
          await ctx.answerCbQuery('ÂΩìÂâçÈ°µÈù¢Êú™ÂèëÁîüÂèòÂåñ');
          return;
        }
        await ctx.answerCbQuery('Â§ÑÁêÜËØ∑Ê±ÇÊó∂Âá∫Èîô');
      }
    });

    //ÂèëË®ÄÊéíÂêç
    this.bot.command('s_messages_ranking', async (ctx) => {
      console.log("Received /messages_ranking command");
      this.controller.showMessagesSentRanking(ctx)
    });
    //ÊÄªÁßØÂàÜÊéíÂêç
    this.bot.command('s_total_score_ranking', async (ctx) => {
      console.log("Received /total_points_ranking command");
      this.controller.showTotalScoreRanking(ctx)
    });
    //ÊÄªÊ¥ªË∑ÉÁßØÂàÜÊéíÂêçy

    this.bot.command('s_total_points_ranking', async (ctx) => {
      console.log("Received /today_points_ranking command");
      this.controller.showPointsRanking(ctx)
    });
    //ÊØèÊó•Ê¥ªË∑ÉÊéíÂêç
    this.bot.command('s_dialy_points_ranking', async (ctx) => {
      console.log("Received /dialy_points_ranking command");
      this.controller.showDialyPointsRanking(ctx)
    });
    //ÈÇÄËØ∑ÊéíÂêç
    this.bot.command('s_invite_ranking', async (ctx) => {
      console.log("Received /invite_ranking command");
      this.controller.showInviteRanking(ctx)
    });
    //ÂÜ≤Êé®ÊéíÂêç
    this.bot.command('s_twitter_ranking', async (ctx) => {
      console.log("Received /twitter_ranking command");
      this.controller.showTwitterRanking(ctx)
    });
    //‰ºöËÆÆÊéíÂêç
    this.bot.command('s_meeting_ranking', async (ctx) => {
      console.log("Received /meeting_ranking command");
      this.controller.showMeetingRanking(ctx)
    });
    //ÊäΩÂ•ñÊéíÂêç
    this.bot.command('s_lottery_ranking', async (ctx) => {
      console.log("Received /lottery_ranking command");
      this.controller.showLotteryRanking(ctx)
    });
    //ÊçêËµ†ÊéíÂêç
    this.bot.command('s_donate_ranking', async (ctx) => {
      console.log("Received /donate_ranking command");
      this.controller.showDonateRanking(ctx)
    });
    //ÁâπÊÆäË¥°ÁåÆÊéíÂêç
    this.bot.command('s_special_ranking', async (ctx) => {
      console.log("Received /special_ranking command");
      this.controller.showSpecialRanking(ctx)
    });
    //ÁîüÊàêÈÇÄËØ∑ÈìæÊé•
    this.bot.command('s_invite_link', async (ctx) => {
      await this.controller.generateInviteLink(ctx);
    });
    //ÂèÇ‰∏éÂÜ≤Êé®
    this.bot.command('s_join_twitter_campaign', async (ctx) => {
      await this.controller.handleJoinTwitterCampaign(ctx);
    });

    // ÂÆö‰πâÂ∏∏Èáè
    const TARGET_CHAT_ID = -1002090542152;//Âä†ÂàÜÁõÆÊ†áÁæ§ID
    const TARGET_THREAD_ID = [107537, 20, 1677, 54];//Âä†ÂàÜÁõÆÊ†áËØùÈ¢òID
    const RESTRICT_THREAD_ID = [1277, 1288];//Á¶ÅË®ÄËØùÈ¢òID

    //ÂàõÂª∫ÊäΩÂ•ñ
    this.bot.command('s_create_lottery', async (ctx) => {
      const chatId = ctx.chat.id;
      console.log("Received /create_lottery command, chatId:", chatId);


      if (chatId == TARGET_CHAT_ID) {
        let lotteryScheduler = this.lotterySchedulers.get(chatId);
        console.log("lotteryScheduler:", lotteryScheduler);
        if (!lotteryScheduler) {
          lotteryScheduler = new LotteryScheduler(this.bot, new MongodbService(), chatId);
          lotteryScheduler.start();//ÂêØÂä®ÊäΩÂ•ñË∞ÉÂ∫¶Âô®
          this.lotterySchedulers.set(chatId, lotteryScheduler);//Â∞ÜÊäΩÂ•ñË∞ÉÂ∫¶Âô®Â≠òÂÖ•Map
          console.log(`Started LotteryScheduler for chatId: ${chatId}`);
        }
        try {
          await lotteryScheduler.createLottery();
          await ctx.reply('ÊäΩÂ•ñÊ¥ªÂä®Â∑≤ÂàõÂª∫ÔºÅ');
        } catch (error) {
          //console.error('Error creating lottery:', error);
          await ctx.reply('ÊäΩÂ•ñÊ¥ªÂä®Â∑≤Â≠òÂú®ÔºåÂàõÂª∫Â§±Ë¥•„ÄÇ');
        }
      }
      else {
        await ctx.reply('ËØ•Áæ§Êó†Ê≥ïÂàõÂª∫ÊäΩÂ•ñÊ¥ªÂä®ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò„ÄÇ');
      }
    });


    // Á¨¨‰∏ÄÂ±Ç‰∏≠Èó¥‰ª∂ÔºöÂü∫Á°ÄËøáÊª§
    this.bot.use(async (ctx, next) => {
      // ‰ªÖÂ§ÑÁêÜÊñáÊú¨Ê∂àÊÅØ
      if (!ctx.message || !('text' in ctx.message)) return next();

      // Ê†áËÆ∞‰∏∫Â∑≤Â§ÑÁêÜÊñáÊú¨Ê∂àÊÅØ
      ctx.state.isTextMessage = true;
      return next();
    });

    // Á¨¨‰∫åÂ±Ç‰∏≠Èó¥‰ª∂ÔºöËØùÈ¢òÈ™åËØÅ
    this.bot.use(async (ctx, next) => {
      if (!ctx.state.isTextMessage) return next();

      // È™åËØÅËØùÈ¢òIDÔºàÂ¶ÇÊûúÈúÄË¶Å‰∏•Ê†ºÈôêÂà∂Ôºâ
      const threadId = ctx.message?.message_thread_id;

      console.log("threadId:", threadId);
      // È™åËØÅÊòØÂê¶ÁõÆÊ†áËØùÈ¢òÂä†ÂàÜ(‰ºöËÆÆ/ÂÜ≤Êé®ÁôªËÆ∞)
      if (!threadId) return next();

      if (TARGET_THREAD_ID.includes(threadId)) {
        ctx.state.isTargetThread = true;
      }

      // È™åËØÅÊòØÂê¶ÈôêÂà∂ÂèëË®Ä(Á¶ÅË®Ä)     
      if (RESTRICT_THREAD_ID.includes(threadId)) {
        ctx.state.isRestrictThread = true;
        console.log("isRestrictThread_ID:", threadId);
      }

      return next();
    });

    // Á¨¨‰∏âÂ±Ç‰∏≠Èó¥‰ª∂ÔºöÈôêÂà∂ÈùûÁÆ°ÁêÜÂëòÂèëË®Ä
    // this.bot.use(async (ctx, next) => {
    //   if (!ctx.state.isRestrictThread) return next();

    //   const userId = ctx.from?.id;
    //   if (!userId) return next();

    //   const isAdmin = await this.isAdmin(ctx, userId);
    //   if (!ctx.chat) {
    //     console.log("chat:", ctx.chat);
    //     return next();
    //   }

    //   if (!isAdmin) {        
    //     await ctx.telegram.restrictChatMember(ctx.chat.id, userId, {
    //       permissions: {
    //         can_send_messages: false,
    //         //can_send_media_messages: false,
    //         can_send_polls: false,
    //         can_send_audios: false,
    //         can_send_documents: false,
    //         can_send_photos: false,
    //         can_send_videos: false,
    //         can_send_video_notes: false,
    //         can_send_voice_notes: false,
    //         can_send_other_messages: false,
    //         can_add_web_page_previews: false,
    //         can_change_info: false,
    //         can_invite_users: false,
    //         can_pin_messages: false,
    //       },
    //     });
    //     return;
    //   }

    //   return next();
    // });

    // Êåá‰ª§Â§ÑÁêÜÔºàÊîØÊåÅ‰ªªÊÑèËØùÈ¢òÔºâ
    this.bot.hears(['ÊàëÁöÑÁßØÂàÜ', 'score'], async (ctx) => {
      await this.controller.showMyScore(ctx);
    });

    this.bot.hears(['Êñ∞ÁßØÂàÜÊéíË°å', 'ÁßØÂàÜÊéíÂêç', 's_scoreranking'], async (ctx) => {
      await this.controller.showTotalScoreRanking(ctx);
    });
    // Êåá‰ª§Â§ÑÁêÜÔºàËé∑ÂèñÈÇÄËØ∑ÈìæÊé•Ôºâ
    this.bot.hears(['ÈÇÄËØ∑ÈìæÊé•', 's_inviteLink', 'ÊàëÁöÑÈÇÄËØ∑ÈìæÊé•'], async (ctx) => {
      await this.controller.generateInviteLink(ctx);
    });

    // Êåá‰ª§Â§ÑÁêÜÔºàËé∑ÂèñÂΩìÂâçÊäΩÂ•ñÊ¥ªÂä®Ôºâ
    this.bot.hears(['ÊäΩÂ•ñÊ¥ªÂä®', 'ÂΩìÂâçÊäΩÂ•ñÊ¥ªÂä®'], async (ctx) => {
      await this.controller.showCurrentLottery(ctx);
    });

    // ÈÄöÁî®Ê∂àÊÅØÂ§ÑÁêÜ
    this.bot.on('message', async (ctx) => {

      const chatId = ctx.chat.id;
      const userId = ctx.from.id;
      let threadId = ctx.message.message_thread_id;
      // if(threadId = "undefinded"){
      //   threadId == 0 ;
      // }
      console.log("Telegram ChatId: ", chatId, " userId:", userId);
      if (!this.lotterySchedulers.has(chatId) && chatId == TARGET_CHAT_ID) {
        const lotteryScheduler = new LotteryScheduler(this.bot, new MongodbService(), chatId);
        lotteryScheduler.start();
        this.lotterySchedulers.set(chatId, lotteryScheduler);
        console.log(`Started LotteryScheduler for chatId: ${chatId}`);
      }

      if (!ctx.state.isTextMessage) return;

      // Âü∫Á°ÄÂ§ÑÁêÜ
      await this.controller.handleMessage(ctx, threadId ? threadId : 0);

      // ÁõÆÊ†áËØùÈ¢òÂä†ÂàÜ‰∏ìÂ±ûÂ§ÑÁêÜ
      if (ctx.state.isTargetThread) {
        await this.controller.handleThreadIdMessage(ctx);
      }
    });


    // ÁõëÂê¨Êñ∞ÊàêÂëòÂä†ÂÖ•
    this.bot.on('new_chat_members', async (ctx) => {
      await this.controller.handleNewMember(ctx);
    });
  }

  public start() {
    this.bot.launch();
    //this.twitterScheduler.start();
    console.log('Bot Â∑≤ÂêØÂä®ÔºÅ');
  }
}